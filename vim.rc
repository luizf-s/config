set wildmenu

set mouse=a
set backspace=indent,eol,start

set hidden

set autoindent
set ignorecase
set timeoutlen=1000 ttimeoutlen=0

set splitright
set splitbelow

set autoread

set noundofile
set noswapfile
set nobackup
set noconfirm

set number

set colorcolumn=80

hi Normal ctermbg=none
set t_Co=256
set termguicolors
" colorscheme simple-dark
set background=dark
colorscheme PaperColor

filetype on

syntax on

set path+=**

set listchars=tab:▸\ ,trail:·,extends:❯,precedes:❮,nbsp:␣,eol:$
set nolist

set hlsearch
set incsearch
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz

nnoremap j gj
nnoremap k gk

let g:slime_target = "tmux"

function! ToggleQF()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction

nnoremap <F5> :Lex 10<CR>
nnoremap <F6> :ls<CR>:b 
nnoremap <F7> :%s//gc<left><left><left>
nnoremap <F8> :grep! -Er 

nnoremap <F9>  :call ToggleQF()<CR>
nnoremap <F10> :cp<CR>
nnoremap <F11> :cn<CR>

set tabstop=2
set shiftwidth=2
set expandtab

autocmd Filetype javascript setlocal ts=2 sw=2
autocmd Filetype typescript setlocal ts=2 sw=2
autocmd Filetype css        setlocal ts=2 sw=2
autocmd Filetype scss       setlocal ts=2 sw=2
autocmd Filetype html       setlocal ts=2 sw=2
autocmd Filetype go         setlocal ts=4 sw=4 sts=4 noexpandtab

function! ListColorschemes()
    let colorschemes = []

    for file in split(globpath(&rtp, 'colors/*.vim'), '\n')
        let colorscheme = fnamemodify(file, ':t:r')
        call add(colorschemes, colorscheme)
    endfor

    return colorschemes
endfunction

let g:curThemeIndex = 0
let g:available_colorschemes = ListColorschemes()

function! NextColorscheme()
  let g:curThemeIndex = (g:curThemeIndex + 1) % len(g:available_colorschemes)
  execute 'colorscheme' g:available_colorschemes[g:curThemeIndex]
  echo g:colors_name
endfunction

function! PrevColorscheme()
  let g:curThemeIndex = (g:curThemeIndex - 1 + len(g:available_colorschemes)) % len(g:available_colorschemes)
  execute 'colorscheme' g:available_colorschemes[g:curThemeIndex]
  echo g:colors_name
endfunction

nnoremap g> :call NextColorscheme()<CR>
nnoremap g< :call PrevColorscheme()<CR>

" autoclose brackets
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O<Tab>
inoremap {{     {
inoremap {}     {}

" autoclose parenthesis
inoremap        (  ()<Left>
inoremap <expr> )  strpart(getline('.'), col('.')-1, 1) == ")" ? "\<Right>" : ")"

" autoclose quotes
inoremap <expr> '       strpart(getline('.'), col('.')-1, 1) == "\'" ? "\<Right>" : "\'\'\<Left>"
inoremap <expr> "       strpart(getline('.'), col('.')-1, 1) == "\"" ? "\<Right>" : "\"\"\<Left>"
inoremap        <C-g>"  "
inoremap        <C-g>'  '
 
" autoclose multiline comments
inoremap <C-g>/*          /**/<Left><Left>
inoremap <C-g>/*<Space>   /*<Space><Space>*/<Left><Left><Left>
inoremap <C-g>/*<CR>      /*<CR>*/<Esc>O
